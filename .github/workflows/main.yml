name: Build and deploy ASP.Net Core app to an Azure Web App

env:
  DOTNET_VERSION: "8.0.x" # set this to the .NET Core version to use
  TAG: ${{ github.RUN_NUMBER }}

on:
  # RUN ON COMMIT

  push:
    branches: ["main"]
    paths:
      - "application/**"
  pull_request:
    branches: ["main"]
    paths:
      - "application/**"
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  # build:
  # runs-on: ubuntu-latest
  job:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Find Projects
        id: find-projects
        run: |
          # echo "::set-output name=projects::$(find . -name '*.csproj' -o -name '*.sln' -printf '%h\n' | sort -u)"
          echo "projects<<EOF" >> $GITHUB_ENV
          find . -name '*.csproj' -o -name '*.sln' -printf '%h\n' | sort -u >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Restore Dependencies
        run: |
          while IFS= read -r project; do
            if [[ -f "$project/$(basename "$project").csproj" ]]; then
              echo "Restoring dependencies for $project ..."
              dotnet restore "$project/$(basename "$project").csproj"
            fi
          done <<< "$projects"
      # - name: Restore Dependencies
      #   run: |
      #     projects=(${{ steps.find-projects.outputs.projects }})
      #     for project in "${projects[@]}"; do
      #       if [[ -f "$project/$(basename "$project").csproj" ]]; then
      #         echo "Restoring dependencies for $project ..."
      #         dotnet restore "$project"
      #       elif [[ -f "$project/$(basename "$project").sln" ]]; then
      #         echo "Restoring dependencies for $project ..."
      #         dotnet restore "$project"
      #       else
      #         echo "No valid project found in $project."
      #       fi
      #     done

      - name: "Az CLI login"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true
          enable-AzPSSession: false

      - name: Build and Test Projects
        run: |
          projects=(${{ steps.find-projects.outputs.projects }})
          for project in "${projects[@]}"; do
            if [[ -f "$project/$(basename "$project").csproj" ]]; then
              echo "Building $project ..."
              dotnet build "$project" --configuration Release --no-restore
              echo "Testing $project ..."
              dotnet test "$project" --no-restore --verbosity normal
            elif [[ -f "$project/$(basename "$project").sln" ]]; then
              echo "Building $project ..."
              dotnet build "$project" --configuration Release --no-restore
              echo "Testing $project ..."
              dotnet test "$project" --no-restore --verbosity normal
            else
              echo "No valid project found in $project."
            fi
          done

      - name: Publish Artifacts
        run: |
          projects=(${{ steps.find-projects.outputs.projects }})
          for project in "${projects[@]}"; do
            if [[ -f "$project/$(basename "$project").csproj" ]]; then
              echo "Publishing $project ..."
              dotnet publish "$project" -c Release -o "$(System.ArtifactsDirectory)/$(basename "$project")"
              zip -r "$project.zip" "$project"  # Zip the published folder
            elif [[ -f "$project/$(basename "$project").sln" ]]; then
              echo "Publishing $project ..."
              dotnet publish "$project" -c Release -o "$(System.ArtifactsDirectory)/$(basename "$project")"
              zip -r "$project.zip" "$project"  # Zip the published folder
            else
              echo "No valid project found in $project."
            fi
          done
      - name: Authenticate with Azure using OIDC
        id: azure-auth
        run: |
          export AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
          export AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
          export FEDERATED_TOKEN=$(curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" -H "Content-Type: application/json" -X POST -d '{"client_id":"${AZURE_CLIENT_ID}","scope":"api://AzureADTokenExchange/.default","grant_type":"urn:ietf:params:oauth:grant-type:jwt-bearer","requested_token_use":"on_behalf_of","assertion":"'$ACTIONS_ID_TOKEN_REQUEST_TOKEN'"}' https://login.microsoftonline.com/${AZURE_TENANT_ID}/oauth2/v2.0/token | jq -r .access_token)
          echo "##vso[task.setvariable variable=FEDERATED_TOKEN;issecret=true]$FEDERATED_TOKEN"

          
      - name: Upload Artifacts to Azure DevOps
        uses: azure/CLI@v1
        env:
          AZURE_DEVOPS_TOKEN: ${{ steps.azure-auth.outputs.FEDERATED_TOKEN }}
        with:
          inlineScript: |
            projects=(${{ steps.find-projects.outputs.projects }})
            for project in "${projects[@]}"; do
              if [[ -f "$project.zip" ]]; then
                echo "Uploading $project.zip to Azure DevOps..."
                az artifacts universal publish \
                  --organization https://dev.azure.com/josielbruk/ \
                  --feed josielbruk \
                  --name "$(basename "$project")" \
                  --version "0.0.${{ github.RUN_NUMBER }}" \
                  --description "Artifact for $project" \
                  --path "$project.zip"
              else
                echo "No artifact found for $project."
              fi
            done

    # - name: Build with dotnet
    #   run: dotnet build ./app/src/RazorPagesTestSample/RazorPagesTestSample.csproj

    # - name: dotnet test
    #   run: dotnet test ./app/src/RazorPagesTestSample/RazorPagesTestSample.csproj --configuration Release

    # - name: Restore dependencies
    #   run: dotnet restore ${{ github.workspace }}/app/src/RazorPagesTestSample/RazorPagesTestSample.sln
    #   shell: /usr/bin/bash -e {0}
    # env:
    #   AZURE_WEBAPP_NAME: your-app-name
    #   AZURE_WEBAPP_PACKAGE_PATH: .
    #   DOTNET_VERSION: 6.0.x
    #   DOTNET_ROOT: /home/runner/.dotnet
    # - name: Publish
    #   run: dotnet publish ./app/src/RazorPagesTestSample/RazorPagesTestSample.csproj -c Release --output ./publish/

    # - name: Publish Artifact to Azure DevOps
    #   uses: azure/CLI@v1
    #   env:
    #     AZURE_DEVOPS_TOKEN: ${{ steps.azure-auth.outputs.FEDERATED_TOKEN }}
    #   with:
    #     inlineScript: |
    #       az artifacts universal publish \
    #       --organization https://dev.azure.com/josielbruk/ \
    #       --feed josielbruk \
    #       --name my-first-package \
    #       --version "0.0.${{ github.RUN_NUMBER }}" \
    #       --description "Welcome to Universal Packages" \
    #       --path "./publish/"
