# name: Build and deploy ASP.Net Core app to an Azure Web App

# env:
#   DOTNET_VERSION: "8.0.x" # set this to the .NET Core version to use
#   TAG: ${{ github.run_number }}
#   app_path: "application/CohortManager/src/Functions"

# on:
#   push:
#     branches: ["main"]
#   workflow_dispatch:

# permissions:
#   contents: read
#   id-token: write

# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 2  # Ensure we have enough history to check the previous commit

#       - name: Set up .NET Core
#         uses: actions/setup-dotnet@v2
#         with:
#           dotnet-version: ${{ env.DOTNET_VERSION }}
#       - name: "Set CI/CD variables"
#         id: variables
#         run: |
#           datetime=$(date -u +'%Y-%m-%dT%H:%M:%S%z')
#           BUILD_DATETIME=$datetime make version-create-effective-file
#           echo "build_datetime_london=$(TZ=Europe/London date --date=$datetime +'%Y-%m-%dT%H:%M:%S%z')" >> $GITHUB_OUTPUT
#           echo "build_datetime=$datetime" >> $GITHUB_OUTPUT
#           echo "build_timestamp=$(date --date=$datetime -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
#           echo "build_epoch=$(date --date=$datetime -u +'%s')" >> $GITHUB_OUTPUT
#           echo "dotnet_version=$(grep "^dotnet" .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
#           echo "version=$(head -n 1 .version 2> /dev/null || echo unknown)" >> $GITHUB_OUTPUT

#       - name: Restore dependencies
#         run: dotnet restore
#         working-directory: ${{ env.app_path }}

#       - name: Determine changed functions
#         id: changes
#         run: |
#           cd ${{ env.app_path }}
#           if git rev-parse --verify HEAD^ > /dev/null 2>&1; then
#             changed_files=$(git diff --name-only HEAD^ HEAD)
#           else
#             changed_files=$(git diff --name-only $(git hash-object -t tree /dev/null) HEAD)
#           fi
#           echo "Changed files: $changed_files"
#           changed_functions=$(for file in $changed_files; do dirname $file; done | sort -u | grep -E '^[^/]+$')
#           if [ -z "$changed_functions" ]; then
#             changed_functions="none"
#           fi
#           echo "Changed functions: $changed_functions"
#           echo "::set-output name=changed_functions::$changed_functions"
#         shell: bash

#       - name: Build and test changed functions
#         if: steps.changes.outputs.changed_functions != ''
#         run: |
#           cd ${{ env.app_path }}
#           for functionDir in ${{ steps.changes.outputs.changed_functions }}; do
#             functionName=$(basename $functionDir)
#             echo "Building and testing $functionName"
#             dotnet build --configuration Release $functionDir
#             dotnet test $functionDir
#           done

#       - name: Publish Artifacts
#         if: steps.changes.outputs.changed_functions != ''
#         run: |
#           cd ${{ env.app_path }}
#           mkdir -p ./artifacts/
#           for functionDir in ${{ steps.changes.outputs.changed_functions }}; do
#             functionName=$(basename $functionDir)
#             echo "Publishing $functionName"
#             dotnet publish --configuration Release --output ./output/$functionName $functionDir
#             zip -r $functionName.zip ./output/$functionName
#             mv $functionName.zip ./artifacts/
#           done

#       - name: Az CLI login
#         uses: azure/login@v1
#         with:
#           client-id: ${{ secrets.AZURE_CLIENT_ID }}
#           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#           allow-no-subscriptions: true
#           enable-AzPSSession: false

#       - name: Get short commit hash
#         id: get-commit-hash
#         run: echo "::set-output name=short_hash::$(git rev-parse --short HEAD)"

#       - name: Upload Artifacts to Azure DevOps
#         if: steps.changes.outputs.changed_functions != ''
#         env:
#           AZURE_DEVOPS_TOKEN: ${{ secrets.AZURE_DEVOPS_TOKEN }}
#         run: |
#           cd ${{ env.app_path }}/artifacts
#           for zipFile in *.zip; do
#             functionName=$(basename $zipFile .zip | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9_.-]/-/g')
#             version="1.0.${{ github.run_number }}-${{ steps.get-commit-hash.outputs.short_hash }}"
#             echo "Uploading $zipFile to Azure Artifacts with version $version"
#             az artifacts universal publish \
#               --organization "https://dev.azure.com/josielbruk/" \
#               --feed "josielbruk" \
#               --name "$functionName" \
#               --version "$version" \
#               --description " Function $functionName n\ $GITHUB_OUTPUT" \
#               --path "$zipFile"
#           done

## Pipeline to build and deploy all ASP.Net app to an Azure Web App
############################################################################################################
name: Build and deploy ASP.Net Core app to an Azure Web App

env:
  DOTNET_VERSION: "8.0.x" # set this to the .NET Core version to use
  TAG: ${{ github.run_number }}
  app_path: "application/CohortManager/src/Functions"
on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Ensure we have enough history to check the previous commit

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ${{ env.app_path }}

      - name: Build functions
        run: |
          cd ${{ env.app_path }}
          for functionDir in $(find . -name '*.csproj' -exec dirname {} \;); do
            functionName=$(basename $functionDir)
            echo "Building $functionName"
            dotnet build --configuration Release $functionDir            
          done

      - name: Test functions
        run: |
          cd ${{ env.app_path }}
          for functionDir in $(find . -name '*.csproj' -exec dirname {} \;); do
            functionName=$(basename $functionDir)
            echo "Testing $functionName"            
            dotnet test $functionDir
          done

      - name: Publish Artifacts
        run: |
          cd ${{ env.app_path }}
          mkdir -p ./artifacts/
          for functionDir in $(find . -name '*.csproj' -exec dirname {} \;); do
            functionName=$(basename $functionDir)
            dotnet publish --configuration Release --output ./output/$functionName $functionDir
            zip -r $functionName.zip ./output/$functionName
            mv $functionName.zip ./artifacts/
          done

      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true
          enable-AzPSSession: false

      - name: Upload Artifacts to Azure DevOps
        env:
          AZURE_DEVOPS_TOKEN: ${{ steps.azure-auth.outputs.FEDERATED_TOKEN }}
          COMMIT_URL: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}
        run: |
          cd ${{ env.app_path }}/artifacts
          for zipFile in *.zip; do
            # functionName=$(basename $zipFile .zip)
            functionName=$(basename $zipFile .zip | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9_.-]/-/g')
            echo "Uploading $zipFile to Azure Artifacts"
            az artifacts universal publish \
              --organization "https://dev.azure.com/josielbruk/" \
              --feed newapp_artifacts \
              --name "$functionName" \
              --version "0.0.2" \
              --description "Function $functionName\nCommit URL: $COMMIT_URL" \
              --path .
          done
