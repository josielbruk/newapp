name: Build and deploy ASP.Net Core app to an Azure Web App

env:
  DOTNET_VERSION: "8.0.x" # set this to the .NET Core version to use
  TAG: ${{ github.run_number }}

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Find Projects
        run: |
          echo "projects<<EOF" >> $GITHUB_ENV
          find . -name '*.csproj' -o -name '*.sln' | sort -u >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # echo the content of $GITHUB_ENV to see the projects
      # echo content of projects variable
      - name: Projects to publish
        run: |
          echo "Projects to publish: ${projects[@]}"
          for project in $projects; do
            echo "Project: $project"
          done

      # - name: Restore Dependencies
      #   run: |
      #     while IFS= read -r project; do
      #       echo "Restoring dependencies for $project ..."
      #       dotnet restore "$project"
      #     done <<< "$projects"

      # - name: Build and Test Projects
      #   run: |
      #     while IFS= read -r project; do
      #       echo "Building $project ..."
      #       dotnet build "$project" --configuration Release --no-restore
      #       echo "Testing $project ..."
      #       dotnet test "$project" --no-restore --verbosity normal
      #     done <<< "$projects"

      # - name: Publish Artifacts
      #   run: |
      #     for project in ${{ env.projects }}; do
      #       output_dir=$(dirname "$project")/publish
      #       echo "Publishing $project ..."
      #       dotnet publish "$project" -c Release -o "$output_dir"
      #       zip -r "${output_dir}.zip" "$output_dir"
      # #     done
      - name: Restore dependencies
        run: dotnet restore application/CohortManager/src/Functions/CohortDistribution/AggregateDataServices/AddAggregationData/AddAggregationData.csproj

      - name: Build
        run: dotnet build application/CohortManager/src/Functions/CohortDistribution/AggregateDataServices/AddAggregationData/AddAggregationData.csproj --no-restore --configuration Release

      - name: Run tests
        run: dotnet test application/CohortManager/src/Functions/CohortDistribution/AggregateDataServices/AddAggregationData/AddAggregationData.csproj --no-build --verbosity normal --configuration Release

      # - name: Print project paths
      #   run: |
      #     # count the number of projects in projects variable
      #     projects=($(echo $projects))
      #     echo "Number of projects: ${#projects[@]}"

      - name: Publish Artifacts
        run: |
          output_dir="./publish"
          project="application/CohortManager/src/Functions/CohortDistribution/AggregateDataServices/AddAggregationData/AddAggregationData.csproj"
          file_name=$(basename "${project%.csproj}")
          dotnet publish "$project" -c Release -o "$output_dir" || exit 1
          echo "===================================================================================================="
          dotnet publish "$project" -c Release -o "$output_dir" || exit 1
          echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
          cd $output_dir
          zip -r "../${file_name}.zip" . || exit 1
          echo "zipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipz"
          cd ..
          echo "ls publish folder zip files"
          ls 

          # for project in $projects; do
          #   echo "Processing $project ..."
          #   file_name=$(basename "${project%.csproj}")
          #   echo "File name: $file_name"
          #   output_dir="./publish/$file_name"
          #   echo "Directory: $output_dir"

            # echo "===================================================================================================="
            # dotnet publish "$project" -c Release -o "$output_dir" || exit 1
            # echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
            # zip -r "${file_name}.zip" "$output_dir" || exit 1
            # echo "zipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipzipz"
            echo "ls publish folder zip files"
            ls $output_dir
          # done

          # projects=($(echo $projects))
          # while IFS= read -r project; do
          #   echo "Processing $project ..."
            
          #   file_name=$(basename "${project%.csproj}")
          #   echo "File name: $file_name"
          #   # output_dir="./publish/$file_name"
          #   # echo "Directory: $output_dir"

          #   # echo "===================================================================================================="
          #   # dotnet publish "$project" -c Release -o "$output_dir" || exit 1
          #   # echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

          #   # zip -r "${file_name}.zip" "$output_dir" || exit 1

          # done <<< "$projects"

      - name: List artifacts
        run: |
          cd publish
          tree


      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true
          enable-AzPSSession: false
      

      # - name: Authenticate with Azure using OIDC
      #   uses: azure/login@v1
      #   with:
      #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     allow-no-subscriptions: true
      #     enable-AzPSSession: false

      # - name: Upload Artifacts to Azure DevOps
      #   run: |
      #     az artifacts universal publish \
      #           --organization https://dev.azure.com/josielbruk/ \
      #           --feed josielbruk \
      #           --name "$(basename "$project")" \
      #           --version "0.0.${{ github.run_number }}" \
      #           --description "Artifact for $project" \
      #           --path "$artifact_zip"

          # for project in "${projects[@]}"; do
          #   artifact_zip=$(dirname "$project")/publish.zip
          #   if [[ -f "$artifact_zip" ]]; then
          #     echo "Uploading $artifact_zip to Azure DevOps..."
          #     az artifacts universal publish \
          #       --organization https://dev.azure.com/josielbruk/ \
          #       --feed josielbruk \
          #       --name "$(basename "$project")" \
          #       --version "0.0.${{ github.run_number }}" \
          #       --description "Artifact for $project" \
          #       --path "$artifact_zip"
          #   else
          #     echo "No artifact found for $project."
          #   fi
          # done
